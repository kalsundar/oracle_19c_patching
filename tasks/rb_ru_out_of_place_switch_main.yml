---
- name: service running status on the node
  environment:
    ORACLE_HOME: "{{ CL_ORACLE_HOME }}"
    PATH: "{{ CL_ORACLE_HOME }}/bin:$PATH"
  ansible.builtin.shell:
    cmd: "{{ script_loc }}/db_svc_status_{{ ansible_host }}.sh"
  register: rb_svc_running
  ignore_errors: true
  tags:
    - rb_stop_db
  failed_when: rb_svc_running.rc not in [ 0, 1 ]

- name: display service running status on the current node
  debug:
    var: rb_svc_running.stdout_lines
  tags:
    - rb_stop_db

- name: copy service running status on the current node to a file
  copy:
    content: "{{ rb_svc_running.stdout }}"
    dest: "{{ rb_log_dir }}/svc_running_on_{{ ansible_host }}_prepatch.log"
  ignore_errors: true
  tags:
    - rb_stop_db

- name: stop database and related service on the current node to rollback patch
  environment:
    ORACLE_HOME: "{{ CL_ORACLE_HOME }}"
    PATH: "{{ CL_ORACLE_HOME }}/bin:$PATH"
  ansible.builtin.shell:
    cmd: "{{ script_loc }}/db_stop_{{ ansible_host }}_prepatch.sh"
  register: rb_db_stop
  tags:
    - rb_stop_db
  failed_when: rb_db_stop.rc not in [ 0, 1 ]

- name: display stop database status
  debug:
    var: rb_db_stop.stdout_lines
  tags:
    - stop_db

- name: modify database oracle home location to original home on the current node
  environment:
    ORACLE_HOME: "{{ CL_ORACLE_HOME }}"
    PATH: "{{ CL_ORACLE_HOME }}/bin:$PATH"
  ansible.builtin.shell:
    cmd: "{{ script_loc }}/rb_db_modify_{{ ansible_host }}.sh"
  register: rb_db_modify
  tags:
    - rb_db_modify
  failed_when: rb_db_modify.rc not in [ 0, 1 ]

- name: replace oracle home entry with original home in /etc/oratab file
  become_user: root
  environment:
    PATH: "$PATH:/usr/bin"
  ansible.builtin.replace:
    path: /etc/oratab
    regexp: "{{ CL_ORACLE_HOME }}"
    replace: "{{ ORACLE_HOME }}"
    validate: /usr/bin/cat /etc/oratab %s
  register: oratab
  ignore_errors: true
  tags:
    - rb_db_modify

- name: display /etc/oratab file
  become_user: root
  debug:
    var: oratab.stdout_lines
  tags:
    - rb_db_modify

# - name: switch grid infrastructure resources to original home
#   become_user: root
#   ansible.builtin.shell:
#     cmd: export TEMP="{{patch_temp_dir}}";export TMPDIR="{{patch_temp_dir}}";export ORACLE_HOME="{{ GI_ORACLE_HOME }}";$ORACLE_HOME/OPatch/opatchauto rollback -switch-clone -oh {{ GI_ORACLE_HOME }}
#   register: rb_opatch_switch
#   tags:
#     - rb_oop_switch

# - name: display switch grid home status
#   become_user: root
#   debug:
#     var: rb_opatch_switch.stdout_lines
#   tags:
#     - rb_oop_switch

# - name: copy the grid infrastructure and database home patch rollback log to a file
#   become_user: root
#   copy:
#     content: "{{ opatch_switch.stdout }}"
#     dest: "{{ rb_log_dir }}/gi_rb_opatch_switch_{{ ansible_host }}_{{ lookup('pipe', 'date +%Y%m%d-%H%M') }}"
#   ignore_errors: true
#   tags:
#     - rb_oop_switch

# - name: verify release update version on the grid infrastructure home
#   ansible.builtin.shell:
#     cmd: export ORACLE_HOME="{{ CL_GI_ORACLE_HOME }}";echo "The below patch instaled on oracle home $ORACLE_HOME";$ORACLE_HOME/OPatch/opatch lspatches
#   ignore_errors: true
#   register: rb_gi_opatch_lsinv
#   tags:
#     - rb_oop_switch_verify

# - name: display grid infrastructure opatch lspatches output
#   debug:
#     var: rb_gi_opatch_lsinv.stdout_lines
#   tags:
#     - rb_oop_switch_verify

- name: startup database in upgrade mode to perform post deinstallation steps
  environment:
    ORACLE_HOME: "{{ ORACLE_HOME }}"
    PATH: "{{ ORACLE_HOME }}/bin:$PATH"
  ansible.builtin.shell:
    cmd: "{{ script_loc }}/startup_upgrade.sh"
  register: rb_start_upgrade
  tags:
    - rb_startup_upgrade
  failed_when: rb_start_upgrade.rc not in [ 0, 1 ]

- name: display startup database output from the current node
  debug:
    var: rb_start_upgrade.stdout_lines
  tags:
    - rb_startup_upgrade

- include_tasks: compile_invalid_objects.yml
- include_tasks: database_ru_post_installation.yml

- name: stop database and related service on the current node
  environment:
    ORACLE_HOME: "{{ ORACLE_HOME }}"
    PATH: "{{ ORACLE_HOME }}/bin:$PATH"
  ansible.builtin.shell:
    cmd: "{{ script_loc }}/db_stop_{{ ansible_host }}_prepatch.sh"
  register: rb_db_stop_stat
  tags:
    - rb_shut_upgrade
  failed_when: rb_db_stop_stat.rc not in [ 0, 1 ]

- name: display database stop status
  debug:
    var: rb_db_stop_stat.stdout_lines
  tags:
    - rb_shut_upgrade

- name: start database on the current node
  environment:
    ORACLE_HOME: "{{ ORACLE_HOME }}"
    PATH: "{{ ORACLE_HOME }}/bin:$PATH"
  ansible.builtin.shell:
    cmd: "{{ script_loc }}/db_start_{{ ansible_host }}_postpatch.sh"
  register: rb_start_db
  tags:
    - rb_start_db
  failed_when: rb_start_db.rc not in [ 0, 1 ]

- name: display start database output from the current node
  debug:
    var: rb_start_db.stdout_lines
  tags:
    - rb_start_db

- name: Execute SQL Statement to get pdb status
  environment:
    PATH: "{{ CL_GI_ORACLE_HOME }}/bin:$PATH:/usr/bin"
  ansible.builtin.shell:
    cmd: "{{ script_loc }}/open_all_pdb.sh"
  register: rb_pdb_open
  tags:
    - rb_start_db
  failed_when: rb_pdb_open.rc not in [ 0, 1 ]

- name: display pdb open status
  debug:
    var: rb_pdb_open.stdout_lines
  tags:
    - rb_start_db

- name: Execute SQL Statement to get pdb open status
  environment:
    PATH: "{{ CL_GI_ORACLE_HOME }}/bin:$PATH:/usr/bin"
  ansible.builtin.shell:
    cmd: "{{ script_loc }}/pdb_open_status.sh"
  register: rb_pdb_open_status
  tags:
    - rb_start_db
  failed_when: rb_pdb_open_status.rc not in [ 0, 1 ]

- name: copy the pdb open status output to a log file
  copy:
    content: "{{ rb_pdb_open_status.stdout }}"
    dest: "{{ rb_log_dir }}/pdb_open_status_{{ ansible_host }}_postpatch.log"
  ignore_errors: true
  tags:
    - rb_start_db

# the below task will validate database component status, SQL patch rollback status
- include_tasks: release_update_post_validation.yml
- include_tasks: compile_invalid_objects.yml
