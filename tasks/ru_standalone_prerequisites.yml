---
- name: remove local directory to cleanup older patch files
  ansible.builtin.file:
    path: "{{ patch_local_dir }}"
    state: absent
  tags:
    - dir_remove

- name: create local directory to copy release update files
  ansible.builtin.file:
    path: "{{ patch_local_dir }}"
    state: directory
    owner: oracle
    # group: dba
    mode: 0775
  tags:
    - dir_create

- name: create temporary directory to create temp files during the patch process
  ansible.builtin.file:
    path: "{{ patch_local_dir }}/tmp"
    state: directory
    owner: oracle
    # group: dba
    mode: 0777
  tags:
    - dir_create

- name: generate shell script to stop and start database
  environment:
    PATH: "{{ GI_ORACLE_HOME }}/bin:$PATH:/usr/bin"
  ansible.builtin.shell:
    cmd: "{{ script_loc}}/db_stopstart_svc_stat.sh {{ script_loc}}"
  ignore_errors: true
  tags:
    - dir_create

- name: change shell script permission to oracle user and group
  ansible.builtin.file:
    path: "{{ script_loc }}"
    state: directory
    recurse: yes
    owner: oracle
    # group: dba
    mode: 0777
  ignore_errors: true
  run_once: true

- name: copy release update to the local patch directory
  ansible.builtin.copy:
    src: "{{ patch_dir }}/{{ gi_patch_id }}"
    dest: "{{ patch_local_dir }}"
    remote_src: yes
    force: yes
    owner: oracle
    # group: dba
  tags:
    - file_copy

- name: upgrade OPatch utility on database home
  ansible.builtin.shell:
    cmd: mv {{ ORACLE_HOME }}/OPatch {{ ORACLE_HOME }}/OPatch_{{ lookup('pipe', 'date +%Y%m%d-%H%M') }}; unzip -d {{ORACLE_HOME }} {{ patch_dir }}/p6880880_122010_Linux-x86-64.zip
  ignore_errors: true
  tags:
    - opatch_upgrade

- name: verify OPatch utility version on database home
  ansible.builtin.shell:
    cmd: export ORACLE_HOME="{{ ORACLE_HOME }}";$ORACLE_HOME/OPatch/opatch version
  register: db_home_opatch_version
  tags:
    - opatch_upgrade

- name: display database home OPatch utility version
  debug:
    var: db_home_opatch_version.stdout_lines
  tags:
    - opatch_upgrade

# - name: Verify patch conflict against database home
#   ansible.builtin.shell:
#     cmd: cd {{ patch_local_dir }}/{{ gi_patch_id }}/{{ db_patch_id }};export TMPDIR="{{patch_temp_dir}}";export ORACLE_HOME="{{ ORACLE_HOME }}";export PATH={{ ORACLE_HOME }}/OPatch:/usr/ccs/bin:$PATH;opatch prereq CheckConflictAgainstOHWithDetail -ph .
#   register: db_home_conflict_status
#   tags:
#     - patch_conflict

# - name: display database home patch conflict output
#   debug:
#     var: db_home_conflict_status.stdout_lines
#   tags:
#     - patch_conflict

- name: upgrade grid infrastructure home OPatch utility
  become_user: root
  ansible.builtin.shell:
    cmd: mv {{ GI_ORACLE_HOME }}/OPatch {{ GI_ORACLE_HOME }}/OPatch_{{ lookup('pipe', 'date +%Y%m%d-%H%M') }}; unzip -d {{GI_ORACLE_HOME }} {{ patch_dir }}/p6880880_122010_Linux-x86-64.zip; chown -R oracle:dba {{ GI_ORACLE_HOME }}/OPatch
  ignore_errors: true
  tags:
    - opatch_upgrade

- name: verify grid infrastructure home OPatch utility version
  ansible.builtin.shell:
    cmd: export ORACLE_HOME="{{ GI_ORACLE_HOME }}";$ORACLE_HOME/OPatch/opatch version
  register: gi_home_opatch_version
  tags:
    - opatch_upgrade

- name: display grid infrastructure home OPatch utility version
  debug:
    var: gi_home_opatch_version.stdout_lines
  tags:
    - opatch_upgrade

- name: verify grid infrastructure and database home patch conflict
  become_user: root
  ansible.builtin.shell:
    cmd: export TEMP="{{patch_temp_dir}}";export TMPDIR="{{patch_temp_dir}}";export ORACLE_HOME="{{ GI_ORACLE_HOME }}";export PATH=$ORACLE_HOME/OPatch:/usr/ccs/bin:$PATH;opatchauto apply {{ patch_local_dir }}/{{gi_patch_id}} -oh {{GI_ORACLE_HOME}},{{ORACLE_HOME}} -analyze
  register: patch_conflict_status
  tags:
    - patch_conflict

# - name: display grid infra home patch conflict output
#   become_user: root
#   debug:
#     var: patch_conflict_status.stdout_lines
#   tags:
#     - patch_conflict

- name: verify service status on the current node instances
  environment:
    ORACLE_HOME: "{{ ORACLE_HOME }}"
    PATH: "{{ ORACLE_HOME }}/bin:$PATH"
  ansible.builtin.shell:
    cmd: "{{ script_loc }}/db_svc_status_{{ ansible_host }}.sh"
  register: svc_status
  ignore_errors: true
  tags:
    - db_stat

- name: display service status on the current node instances
  debug:
    var: svc_status.stdout_lines
  tags:
    - db_stat

- name: copy the database and related service status log to a file
  copy:
    content: "{{ svc_status.stdout }}"
    dest: "{{ log_dir }}/service_status_{{ ansible_host }}_precheck.log"
  ignore_errors: true
  tags:
    - db_stat

- name: execute SQL Statement to get pdb open_mode status
  environment:
    PATH: "$PATH:/usr/bin"
  ansible.builtin.shell:
    cmd: "{{ script_loc }}/pdb_open_status.sh"
  register: pdb_open_status
  ignore_errors: true
  tags:
    - db_stat

- name: display pdb open_mode status output
  debug:
    var: pdb_open_status.stdout_lines
  tags:
    - db_stat

- name: copy the pdb open_mode status output to a log file
  copy:
    content: "{{ pdb_open_status.stdout }}"
    dest: "{{ log_dir }}/pdb_open_status_{{ ansible_host }}_prepatch.log"
  ignore_errors: true
  tags:
    - db_stat

- name: execute SQL Statement to get database component status
  environment:
    PATH: "$PATH:/usr/bin"
  ansible.builtin.shell:
    cmd: "{{ script_loc }}/db_comp_status.sh"
  register: db_component_status
  ignore_errors: true
  tags:
    - db_stat

- name: display database component status output
  debug:
    var: db_component_status.stdout_lines
  tags:
    - db_stat

- name: copy the database component status output to a log file
  copy:
    content: "{{ db_component_status.stdout }}"
    dest: "{{ log_dir }}/db_component_status_{{ ansible_host }}_prepatch.log"
  ignore_errors: true
  tags:
    - db_stat

- name: backup grid infrastructure home
  become_user: root
  community.general.archive:
    path: "{{ GI_ORACLE_HOME }}"
    dest: "{{ patch_dir }}/orahomebackup/{{ ansible_hostname }}_{{ current_version }}_gi_{{ lookup('pipe', 'date +%m%d-%H%M') }}.tar.gz"
    format: gz
  tags:
    - gi_db_files_bkp

- name: backup database home
  become_user: root
  community.general.archive:
    path: "{{ ORACLE_HOME }}"
    dest: "{{ patch_dir }}/orahomebackup/{{ ansible_hostname }}_{{ current_version }}_db_{{ lookup('pipe', 'date +%m%d-%H%M') }}.tar.gz"
    format: gz
  tags:
    - gi_db_files_bkp

- name: check backup files from the backup location
  become_user: root
  ansible.builtin.shell:
    cmd: ls -lrth {{patch_dir}}/orahomebackup/{{ ansible_hostname }}_*
  register: list_backup_file
  ignore_errors: true
  tags:
    - gi_db_files_bkp

- name: list backup files from the backup location
  become_user: root
  debug:
    var: list_backup_file.stdout_lines
  tags:
    - gi_db_files_bkp
