---
- name: service running status on the node
  environment:
    ORACLE_HOME: "{{ ORACLE_HOME }}"
    PATH: "{{ ORACLE_HOME }}/bin:$PATH"
  ansible.builtin.shell:
    cmd: "{{ script_loc }}/db_svc_status_{{ ansible_host }}.sh"
  register: svc_running
  ignore_errors: true
  tags:
    - stop_db
  failed_when: svc_running.rc not in [ 0, 1 ]

- name: display service running status on the current node
  debug:
    var: svc_running.stdout_lines
  tags:
    - stop_db

- name: copy service running status on the current node to a file
  copy:
    content: "{{ svc_running.stdout }}"
    dest: "{{ log_dir }}/svc_running_on_{{ ansible_host }}_prepatch.log"
  ignore_errors: true
  tags:
    - stop_db

- name: stop database and related service on the current node to install patch
  environment:
    ORACLE_HOME: "{{ ORACLE_HOME }}"
    PATH: "{{ ORACLE_HOME }}/bin:$PATH"
  ansible.builtin.shell:
    cmd: "{{ script_loc }}/db_stop_{{ ansible_host }}_prepatch.sh"
  register: db_stop
  tags:
    - stop_db
  failed_when: db_stop.rc not in [ 0, 1 ]

- name: display stop database status
  debug:
    var: db_stop.stdout_lines
  tags:
    - stop_db

- name: modify database oracle home location to cloned home on the current node
  environment:
    ORACLE_HOME: "{{ ORACLE_HOME }}"
    PATH: "{{ ORACLE_HOME }}/bin:$PATH"
  ansible.builtin.shell:
    cmd: "{{ script_loc }}/db_modify_{{ ansible_host }}.sh"
  register: db_modify
  tags:
    - db_modify
  failed_when: db_modify.rc not in [ 0, 1 ]

- name: display modify database oracle home location status
  debug:
    var: db_modify.stdout_lines
  tags:
    - db_modify

- name: replace oracle home entry with cloned home in /etc/oratab file
  become_user: root
  environment:
    PATH: "$PATH:/usr/bin"
  ansible.builtin.replace:
    path: /etc/oratab
    regexp: "{{ ORACLE_HOME }}"
    replace: "{{ CL_ORACLE_HOME }}"
    validate: /usr/bin/cat /etc/oratab %s
  register: oratab
  ignore_errors: true
  tags:
    - db_modify

- name: display /etc/oratab file
  become_user: root
  debug:
    var: oratab.stdout_lines
  tags:
    - db_modify

- name: switch grid infrastructure resources to cloned home
  become_user: root
  ansible.builtin.shell:
    cmd: export TEMP="{{patch_temp_dir}}";export TMPDIR="{{patch_temp_dir}}";export ORACLE_HOME="{{ GI_ORACLE_HOME }}";$ORACLE_HOME/OPatch/opatchauto apply -switch-clone -oh {{ GI_ORACLE_HOME }}
  register: opatch_switch
  tags:
    - oop_switch

- name: display switch grid infrastructure resources to cloned home status
  become_user: root
  debug:
    var: opatch_switch.stdout_lines
  tags:
    - oop_switch

- name: copy the grid infrastructure and database home patch apply log to a file
  become_user: root
  copy:
    content: "{{ opatch_switch.stdout }}"
    dest: "{{ log_dir }}/gi_opatch_switch_{{ ansible_host }}_{{ lookup('pipe', 'date +%Y%m%d-%H%M') }}"
  ignore_errors: true
  tags:
    - oop_switch

- name: verify release update version on the grid infrastructure home
  ansible.builtin.shell:
    cmd: export ORACLE_HOME="{{ CL_GI_ORACLE_HOME }}";echo "The below patch instaled on oracle home $ORACLE_HOME";$ORACLE_HOME/OPatch/opatch lspatches
  ignore_errors: true
  register: gi_opatch_lsinv
  tags:
    - oop_switch_verify

- name: display grid infrastructure opatch lspatches output
  debug:
    var: gi_opatch_lsinv.stdout_lines
  tags:
    - oop_switch_verify

# - name: startup database in upgrade mode to perform post installation steps
#   environment:
#     PATH: "{{ CL_GI_ORACLE_HOME }}/bin:$PATH:/usr/bin"
#   ansible.builtin.shell:
#     cmd: "{{ script_loc }}/startup_upgrade.sh"
#   register: start_upgrade
#   tags:
#     - startup_upgrade
#   failed_when: start_upgrade.rc not in [ 0, 1 ]

# - name: display startup database output from the current node
#   debug:
#     var: start_upgrade.stdout_lines
#   tags:
#     - startup_upgrade

- name: start database on the current node
  environment:
    ORACLE_HOME: "{{ CL_ORACLE_HOME }}"
    PATH: "{{ CL_ORACLE_HOME }}/bin:$PATH"
  ansible.builtin.shell:
    cmd: "{{ script_loc }}/db_start_{{ ansible_host }}_postpatch.sh"
  register: start_db
  tags:
    - start_db
  failed_when: start_db.rc not in [ 0, 1 ]

# - name: display start database output from the current node
#   debug:
#     var: start_db.stdout_lines
#   tags:
#     - start_db

- name: execute SQL statement to open all pdb to run datapatch utility
  environment:
    PATH: "{{ CL_GI_ORACLE_HOME }}/bin:$PATH:/usr/bin"
  ansible.builtin.shell:
    cmd: "{{ script_loc }}/open_all_pdb.sh"
  register: pdb_open
  tags:
    - start_db
  failed_when: pdb_open.rc not in [ 0, 1 ]

- name: display pdb open status
  debug:
    var: pdb_open.stdout_lines
  tags:
    - start_db

- name: Execute SQL Statement to get pdb open status
  environment:
    PATH: "{{ CL_GI_ORACLE_HOME }}/bin:$PATH:/usr/bin"
  ansible.builtin.shell:
    cmd: "{{ script_loc }}/pdb_open_status.sh"
  register: pdb_open_status
  tags:
    - start_db
  failed_when: pdb_open_status.rc not in [ 0, 1 ]

- name: copy the pdb open status output to a log file
  copy:
    content: "{{ pdb_open_status.stdout }}"
    dest: "{{ log_dir }}/pdb_open_status_{{ ansible_host }}_postpatch.log"
  ignore_errors: true
  tags:
    - start_db

- include_tasks: compile_invalid_objects.yml
- include_tasks: database_ru_post_installation.yml

# - name: stop database and related service on the current node
#   environment:
#     ORACLE_HOME: "{{ CL_ORACLE_HOME }}"
#     PATH: "{{ CL_ORACLE_HOME }}/bin:$PATH"
#   ansible.builtin.shell:
#     cmd: "{{ script_loc }}/db_stop_{{ ansible_host }}_prepatch.sh"
#   register: db_stop_stat
#   tags:
#     - shut_upgrade
#   failed_when: db_stop_stat.rc not in [ 0, 1 ]

# - name: display database status
#   debug:
#     var: db_stop_stat.stdout_lines
#   tags:
#     - shut_upgrade

# the below task will validate database component status, SQL patch apply status
- include_tasks: release_update_post_validation.yml
- include_tasks: compile_invalid_objects.yml
